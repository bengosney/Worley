{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Point","x","y","Object","classCallCheck","this","from","to","Math","sqrt","App","props","_this","_super","call","state","pixelSize","height","width","screenWidth","screenHeight","mouseX","mouseY","mouseEvent","effectMod","strength","strengthCur","mouseOver","points","pointCount","drawing","ctx","updateWindowDimensions","bind","assertThisInitialized","startts","getTS","count","Array","i","random","_this2","canvas","refs","getContext","rAF","requestAnimationFrame","updateAnimationState","window","addEventListener","rect","getBoundingClientRect","_window","innerWidth","innerHeight","min","realHeight","realWidth","getPoints","setState","nextFrame","cancelAnimationFrame","removeEventListener","ts","clearFrame","drawDots","_this3","_this$state","clearRect","Date","getTime","value","r1","r2","x1","y1","x2","y2","_this$state2","distances","curPoint","length","push","distance","sortedDistances","sort","a","b","beginPath","colour","convertRange","fillStyle","concat","fill","event","clientX","left","clientY","top","console","log","_this$state3","_this4","_this$state4","react_default","createElement","className","ref","onClick","e","addPoint","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"grBAIMA,aACF,SAAAA,EAAYC,EAAGC,GAAIC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GACfK,KAAKJ,EAAIA,EACTI,KAAKH,EAAIA,4DAGGI,EAAMC,GAClB,IAAMN,EAAIK,EAAKL,EAAIM,EAAGN,EAChBC,EAAII,EAAKJ,EAAIK,EAAGL,EAEtB,OAAOM,KAAKC,KAAKR,EAAIA,EAAIC,EAAIA,YA+KtBQ,0CA1KX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAT,OAAAC,EAAA,EAAAD,CAAAE,KAAAK,IACfE,EAAAC,EAAAC,KAAAT,KAAMM,IAEDI,MAAQ,CACTC,UAAW,GACXC,OAAQ,IACRC,MAAO,IACPC,YAAa,EACbC,aAAc,EACdC,QAAS,KACTC,QAAS,KACTC,WAAY,EACZC,UAAW,EACXC,SAAU,GACVC,YAAa,EACbC,WAAW,EACXC,OAAQ,GACRC,WAAY,IAGhBjB,EAAKkB,SAAU,EACflB,EAAKmB,IAAM,KAEXnB,EAAKoB,uBAAyBpB,EAAKoB,uBAAuBC,KAA5B9B,OAAA+B,EAAA,EAAA/B,CAAAS,IAC9BA,EAAKuB,QAAUvB,EAAKwB,QAxBLxB,wDA2BTM,EAAOD,EAAQoB,GAGrB,IAFA,IAAMT,EAAS,IAAIU,MAAMD,GAEhBE,EAAI,EAAGA,EAAIF,EAAOE,IAAK,CAC5B,IAAMtC,EAAIiB,EAAQV,KAAKgC,SACjBtC,EAAIe,EAAST,KAAKgC,SAExBZ,EAAOW,GAAK,IAAIvC,EAAMC,EAAGC,GAG7B,OAAO0B,8CAGS,IAAAa,EAAApC,KACVqC,EAASrC,KAAKsC,KAAKD,OACzBrC,KAAKqC,OAASA,EACdrC,KAAK0B,IAAMW,EAAOE,WAAW,MAE7BvC,KAAKwC,IAAMC,sBAAsB,kBAAML,EAAKM,yBAC5C1C,KAAK2B,yBACLgB,OAAOC,iBAAiB,SAAU5C,KAAK2B,yEAIvC,IAAMkB,EAAO7C,KAAKqC,OAAOS,wBADJC,EAEeJ,OAA5BK,EAFaD,EAEbC,WAAYC,EAFCF,EAEDE,YACZpC,EAAkBgC,EAAlBhC,MAAOD,EAAWiC,EAAXjC,OACTE,EAAcX,KAAK+C,IAAIrC,EAAOmC,GAC9BjC,EAAeZ,KAAK+C,IAAItC,EAAQqC,GAC9BzB,EAAexB,KAAKU,MAApBc,WAEF2B,EAAapC,EAAe,EAC5BqC,EAAYtC,EAAc,EAE1BS,EAASvB,KAAKqD,UAAUD,EAAWD,EAAY3B,GAErDxB,KAAKsD,SAAS,CAAEzC,MAAOuC,EAAWxC,OAAQuC,EAAY5B,OAAQA,EAAQR,aAAcA,EAAcD,YAAaA,IAC/Gd,KAAKuD,2DAILC,qBAAqBxD,KAAKwC,KAC1BG,OAAOc,oBAAoB,SAAUzD,KAAK2B,uEAI1C3B,KAAK0D,GAAK1D,KAAK+B,QACf/B,KAAK2D,aAEL3D,KAAK4D,+CAKG,IAAAC,EAAA7D,KACRA,KAAKwC,IAAMC,sBAAsB,kBAAMoB,EAAKnB,8DAGnC,IAAAoB,EACiB9D,KAAKU,MAAvBG,EADCiD,EACDjD,MAAOD,EADNkD,EACMlD,OACCZ,KAAR0B,IAEJqC,UAAU,EAAG,EAAGlD,EAAOD,mCAM3B,OAFa,IAAIoD,MAELC,+CAGHC,EAAOC,EAAIC,GACpB,OAASF,EAAQC,EAAG,KAAOC,EAAG,GAAKA,EAAG,KAAQD,EAAG,GAAKA,EAAG,IAAMC,EAAG,oCAG7DC,EAAIC,EAAIC,EAAIC,GACjB,IAAM5E,EAAIyE,EAAKE,EACT1E,EAAIyE,EAAKE,EAEf,OAAOrE,KAAKC,KAAKR,EAAIA,EAAIC,EAAIA,iCAG3BqE,EAAOC,EAAIC,GACb,OAASF,EAAQC,EAAG,KAAOC,EAAG,GAAKA,EAAG,KAAQD,EAAG,GAAKA,EAAG,IAAMC,EAAG,sCAQlE,IALO,IAAAK,EACsCzE,KAAKU,MAA1CG,EADD4D,EACC5D,MAAOD,EADR6D,EACQ7D,OAAQW,EADhBkD,EACgBlD,OACfG,GAFD+C,EACwB9D,UACfX,KAAR0B,KAGC9B,GAFEI,KAAK+B,QAEH,GAAGnC,EAAIiB,EAAOjB,IACvB,IAAK,IAAIC,EAAI,EAAGA,EAAIe,EAAQf,IAAK,CAI7B,IAHA,IAAM6E,EAAY,GACZC,EAAW,IAAIhF,EAAMC,EAAGC,GAErBqC,EAAI,EAAGA,EAAIX,EAAOqD,OAAQ1C,IAC/BwC,EAAUG,KAAKlF,EAAMmF,SAASvD,EAAOW,GAAIyC,IAG7C,IAAMI,EAAkBL,EAAUM,KAAK,SAACC,EAAEC,GAAH,OAASD,EAAEC,IAElDxD,EAAIyD,YACJzD,EAAImB,KAAKjD,EAAGC,EAAG,EAAG,GAElB,IAAMuF,EAASpF,KAAKqF,aAAaN,EAAgB,GAAI,CAAC,EAAGA,EAAgBA,EAAgBH,OAAS,GAAK,IAAK,CAAC,IAAK,IAClHlD,EAAI4D,UAAJ,OAAAC,OAAuBH,EAAvB,MAAAG,OAAkCH,EAAlC,MAAAG,OAA6CH,EAA7C,KACA1D,EAAI8D,kDAKEnD,EAAQoD,GACtB,IAAM5C,EAAOR,EAAOS,wBACdlD,EAAI6F,EAAMC,QAAU7C,EAAK8C,KACzB9F,EAAI4F,EAAMG,QAAU/C,EAAKgD,IAC/BC,QAAQC,IAAI,MAAQnG,EAAI,OAASC,oCAG5B4F,GAAO,IAAAO,EACiDhG,KAAKU,MAA1Da,EADIyE,EACJzE,OAAQV,EADJmF,EACInF,MAAOD,EADXoF,EACWpF,OAAQG,EADnBiF,EACmBjF,aAAcD,EADjCkF,EACiClF,YAEvClB,EAAII,KAAKqF,aAAaI,EAAMC,QAAS,CAAC,EAAG5E,GAAc,CAAC,EAAGD,IAC3DhB,EAAIG,KAAKqF,aAAaI,EAAMG,QAAS,CAAC,EAAG7E,GAAe,CAAC,EAAGH,IAElEW,EAAOsD,KAAK,IAAIlF,EAAMC,EAAGC,IACzBG,KAAKsD,SAAS,CAAC/B,WACfvB,KAAKuD,6CAGA,IAAA0C,EAAAjG,KAAAkG,EACqBlG,KAAKU,MAAvBG,EADHqF,EACGrF,MAAOD,EADVsF,EACUtF,OAEf,OACIuF,EAAAlB,EAAAmB,cAAA,OAAKC,UAAW,QACZF,EAAAlB,EAAAmB,cAAA,OAAKC,UAAW,QACZF,EAAAlB,EAAAmB,cAAA,UAAQE,IAAI,SAASzF,MAAOA,EAAOD,OAAQA,EAAQ2F,QAAS,SAACC,GAAD,OAAOP,EAAKQ,SAASD,eApKnFE,aCNEC,QACW,cAA7BhE,OAAOiE,SAASC,UAEe,UAA7BlE,OAAOiE,SAASC,UAEhBlE,OAAOiE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAlB,EAAAmB,cAACa,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.46ce9247.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { makeNoise2D } from \"open-simplex-noise\";\nimport \"./App.css\";\n\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    static distance(from, to) {\n        const x = from.x - to.x;\n        const y = from.y - to.y;\n\n        return Math.sqrt(x * x + y * y);\n    }\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pixelSize: 10,\n            height: 500,\n            width: 150,\n            screenWidth: 0,\n            screenHeight: 0,\n            mouseX: -9999,\n            mouseY: -9999,\n            mouseEvent: 0,\n            effectMod: 2,\n            strength: 40,\n            strengthCur: 0,\n            mouseOver: false,\n            points: [],\n            pointCount: 10,\n        };\n\n        this.drawing = false;\n        this.ctx = null;\n\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n        this.startts = this.getTS();\n    }\n\n    getPoints(width, height, count) {\n        const points = new Array(count);\n\n        for (let i = 0; i < count; i++) {\n            const x = width * Math.random();\n            const y = height * Math.random();\n\n            points[i] = new Point(x, y);\n        }\n\n        return points;\n    }\n\n    componentDidMount() {\n        const canvas = this.refs.canvas;\n        this.canvas = canvas;\n        this.ctx = canvas.getContext(\"2d\");\n\n        this.rAF = requestAnimationFrame(() => this.updateAnimationState());\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateWindowDimensions() {\n        const rect = this.canvas.getBoundingClientRect();\n        const { innerWidth, innerHeight } = window;\n        const { width, height } = rect;\n        const screenWidth = Math.min(width, innerWidth);\n        const screenHeight = Math.min(height, innerHeight);\n        const { pointCount } = this.state;\n\n        const realHeight = screenHeight / 4;\n        const realWidth = screenWidth / 4;\n\n        const points = this.getPoints(realWidth, realHeight, pointCount);\n\n        this.setState({ width: realWidth, height: realHeight, points: points, screenHeight: screenHeight, screenWidth: screenWidth });\n        this.nextFrame();\n    }\n\n    componentWillUnmount() {\n        cancelAnimationFrame(this.rAF);\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    updateAnimationState() {\n        this.ts = this.getTS();\n        this.clearFrame();\n\n        this.drawDots();\n\n        //this.nextFrame();\n    }\n\n    nextFrame() {\n        this.rAF = requestAnimationFrame(() => this.updateAnimationState());\n    }\n\n    clearFrame() {\n        const { width, height } = this.state;\n        const { ctx } = this;\n\n        ctx.clearRect(0, 0, width, height);\n    }\n\n    getTS() {\n        const date = new Date();\n\n        return date.getTime();\n    }\n\n    convertRange(value, r1, r2) {\n        return ((value - r1[0]) * (r2[1] - r2[0])) / (r1[1] - r1[0]) + r2[0];\n    }\n\n    distance(x1, y1, x2, y2) {\n        const x = x1 - x2;\n        const y = y1 - y2;\n\n        return Math.sqrt(x * x + y * y);\n    }\n\n    scale(value, r1, r2) {\n        return ((value - r1[0]) * (r2[1] - r2[0])) / (r1[1] - r1[0]) + r2[0];\n    }\n\n    drawDots() {\n        const { width, height, points, pixelSize } = this.state;\n        const { ctx } = this;\n        const ts = this.getTS() / 1000;\n\n        for (let x = 0; x < width; x++) {\n            for (let y = 0; y < height; y++) {\n                const distances = [];\n                const curPoint = new Point(x, y);\n\n                for (let i = 0; i < points.length; i++) {\n                    distances.push(Point.distance(points[i], curPoint));\n                }\n\n                const sortedDistances = distances.sort((a,b) => a-b);\n\n                ctx.beginPath();\n                ctx.rect(x, y, 1, 1);\n                \n                const colour = this.convertRange(sortedDistances[0], [0, sortedDistances[sortedDistances.length - 1] / 10], [255, 0]);\n                ctx.fillStyle = `rgb(${colour}, ${colour}, ${colour})`;\n                ctx.fill();\n            }\n        }\n    }\n\n    getCursorPosition(canvas, event) {\n        const rect = canvas.getBoundingClientRect()\n        const x = event.clientX - rect.left\n        const y = event.clientY - rect.top\n        console.log(\"x: \" + x + \" y: \" + y)\n    }\n\n    addPoint(event) {\n        const { points, width, height, screenHeight, screenWidth } = this.state;\n        \n        const x = this.convertRange(event.clientX, [0, screenWidth], [0, width]);\n        const y = this.convertRange(event.clientY, [0, screenHeight], [0, height]);\n\n        points.push(new Point(x, y));\n        this.setState({points});\n        this.nextFrame();\n    }\n\n    render() {\n        const { width, height } = this.state;\n\n        return (\n            <div className={\"grid\"}>\n                <div className={\"dots\"}>\n                    <canvas ref=\"canvas\" width={width} height={height} onClick={(e) => this.addPoint(e)} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}